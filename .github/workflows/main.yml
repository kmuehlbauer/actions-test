name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: 
      - created

  workflow_dispatch:

jobs:
  micromamba:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
    - uses: actions/checkout@v2
    - uses: ./.github/actions/micromamba
      with:
        python-version: 3.8
        env-name: wradlib-tests
        requirements: ./ci/requirments/linux_full_deps_conda.txt
    - name: Test environment
      run: |
        micromamba list
    
  opengl:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: "Install OpenGL"
        run: |
          sudo apt-get update
          sudo apt-get -q -y install libglu1-mesa-dev libgl1-mesa-dev libxi-dev libglfw3-dev libgles2-mesa-dev mesa-utils
      - name: "Start xvfb daemon"
        run: |
          export DISPLAY=:99.0
          /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1400x900x24 -ac +extension GLX +render       
          sleep 5
      - name: "Check OpenGL"
        run: |
          export DISPLAY=:99.0  
          glxinfo
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        include:
          - test_number: 2
            python_version: "3.7"
            deps: "full"
            test: "standard"
          - test_number: 3
            python_version: "3.7"
            deps: "full"
            test: "examples"
    steps:
      - name: "Install OpenGL"
        run: |
          sudo apt-get update
          sudo apt-get -q -y install libglu1-mesa-dev libgl1-mesa-dev libxi-dev libglfw3-dev libgles2-mesa-dev mesa-utils
      - name: "Check xvfb daemon"
        run: |
          export DISPLAY=:99.0
          /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1400x900x24 -ac +extension GLX +render       
          sleep 5
      - name: "Check OpenGL"
        run: |
          export DISPLAY=:99.0
          glxinfo
      - name: Install micromamba
        run: |
          wget -qO- https://micromamba.snakepit.net/api/micromamba/linux-64/latest | tar -xvj bin/micromamba --strip-components=1
          mv "$HOME/.bashrc" .bashrcBAK
          touch "$HOME/.bashrc"
          ./micromamba shell init -s bash -p ~/micromamba
          cat "$HOME/.bashrc" >> "$HOME/.bash_profile"
          mv .bashrcBAK "$HOME/.bashrc"
      - name: Install conda-environment
        run: |
          #micromamba create -y -n vispy-tests python=${{ matrix.python_version }} cmake cython coveralls decorator "freetype<2.10.0" freetype-py "glfw!=3.3.1" imageio jupyter matplotlib meshio networkx numpy pillow pyqt=5 pysdl2 pytest pytest-cov pytest-sugar pyopengl scikit-image scipy six --channel conda-forge
          micromamba create -y -n vispy-tests python=${{ matrix.python_version }} cmake cython coveralls decorator "freetype<2.10.0" freetype-py "glfw!=3.3.1" imageio matplotlib-base meshio networkx numpy pillow pytest pytest-cov pytest-sugar pyopengl scikit-image scipy six --channel conda-forge
          echo "set -eo pipefail" >> "$HOME/.bash_profile"
          echo "micromamba activate vispy-tests" >> "$HOME/.bash_profile"
      - name: Install pip-dependencies
        run: |
          if [ "${{ matrix.deps }}" == 'full' ]; then
            pip install husl pypng cassowary pyopengltk
            rm -rf vispy/ext/_bundled
          fi
      - uses: actions/checkout@v2
        with:
          repository: vispy/vispy 
          submodules: 'recursive'
          path: vispy
      - name: Install vispy
        run: |
          cd vispy
          python setup.py install
          python setup.py develop
      - name: Version Info
        run: |
          if [ "${{ matrix.test }}" != 'osmesa' ]; then
            export DISPLAY=:99.0
          fi
          if [ "${{ matrix.test }}" == 'osmesa' ]; then
            export OSMESA_LIBRARY=~/micromamba/envs/vispy-tests/lib/libOSMesa32.so;
            export VISPY_GL_LIB=$OSMESA_LIBRARY
          fi
          micromamba list
          python -c "import vispy; print(vispy.version.version)"
          python -c "import vispy; print(vispy.sys_info())"
      - name: Run tests
        run: |
          cd vispy
          if [ "${{ matrix.test }}" == 'standard' ]; then
            export DISPLAY=:99.0
            python make test unit --tb=short
          fi
          if [ "${{ matrix.test }}" == 'examples' ]; then
            export DISPLAY=:99.0
            make examples
          fi
          if [ "${{ matrix.test }}" == 'osmesa' ]; then
            export OSMESA_LIBRARY=~/micromamba/envs/vispy-tests/lib/libOSMesa32.so;
            make osmesa
          fi
      - name: Run a one-line script
        run: echo Hello, world!
      - name: Run a one-line script
        run: echo Hello, world!
      - name: If deps
        if: ${{ matrix.deps }} == 'full'
        run: echo Hello, world!  
      - name: Run a multi-line script
        run: |
          echo ${{ matrix.deps }}
          echo Add other actions to build,
          echo test, and deploy your project.
  build_1:
    runs-on: macos-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v2
      - name: Run a one-line script
        run: echo Hello, world!
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
          echo "alias realpath='python -c \"import os, sys; print(os.path.realpath(sys.argv[1]))\"'" >> "$HOME/.bash_profile"
      - name: Check realpath
        run: |
          mkdir test
          export TEST=`realpath ./test`
          echo $TEST

  hello_world_job:
    runs-on: ubuntu-latest
    name: A job to say hello
    steps:
    - uses: actions/checkout@v2
    - uses: ./.github/actions/test
      with:
        who-to-greet: 'Mona the Octocat'

  umamba:
    name: windows test
    runs-on: windows-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: install micromamba
        run: |
          Invoke-Webrequest -URI https://micromamba.snakepit.net/api/micromamba/win-64/latest -OutFile micromamba.tar.bz2
          C:\PROGRA~1\7-Zip\7z.exe x micromamba.tar.bz2 -aoa
          C:\PROGRA~1\7-Zip\7z.exe x micromamba.tar -ttar -aoa -r Library\bin\micromamba.exe
          MOVE -Force Library\bin\micromamba.exe micromamba.exe
          .\micromamba.exe shell init -s powershell -p $HOME/micromamba
        shell: powershell
      - name: Install deps
        run: |
          $Env:MAMBA_ROOT_PREFIX=(Join-Path -Path $HOME -ChildPath micromamba)
          $Env:MAMBA_EXE=(Join-Path -Path (Get-Location) -ChildPath micromamba.exe)
          #.\micromamba.exe shell hook -s powershell | Out-String | Invoke-Expression
          .\micromamba.exe create -y -n wradlib-tests python=3.9 pip --channel conda-forge
        shell: powershell
      - name: Install packages
        run: |
          eval "$(./micromamba shell hook -s bash)"
          micromamba activate wradlib-tests
          micromamba install -y tqdm --channel conda-forge
          micromamba list
          python -c "import sys; print(sys.version)"
          
  trigger_rtd:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: [build]
    steps:
      - name: Run a multi-line script
        run: |
          echo Works.
          
  upload_pypi:
    if: github.event_name == 'release'
    needs: [build]
    name: deploy to pypi
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install semver setuptools wheel twine
          git describe --tags --long
          git rev-parse HEAD
      - name: Package and Upload
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          echo "RUN UPLOAD PYPI"
  
