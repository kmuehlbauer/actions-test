name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: 
      - created

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run a one-line script
        run: echo Hello, world!
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

  hello_world_job:
    runs-on: ubuntu-latest
    name: A job to say hello
    steps:
    - id: foo
    - uses: actions/checkout@v2
    - uses: ./.github/workflows/test
      with:
        who-to-greet: 'Mona the Octocat'
    - run: echo random-number ${{ steps.foo.outputs.random-number }} 
      shell: bash


  umamba:
    name: windows test
    runs-on: windows-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: install micromamba
        run: |
          Invoke-Webrequest -URI https://micromamba.snakepit.net/api/micromamba/win-64/latest -OutFile micromamba.tar.bz2
          C:\PROGRA~1\7-Zip\7z.exe x micromamba.tar.bz2 -aoa
          C:\PROGRA~1\7-Zip\7z.exe x micromamba.tar -ttar -aoa -r Library\bin\micromamba.exe
          MOVE -Force Library\bin\micromamba.exe micromamba.exe
          .\micromamba.exe shell init -s powershell -p $HOME/micromamba
        shell: powershell
      - name: Install deps
        run: |
          $Env:MAMBA_ROOT_PREFIX=(Join-Path -Path $HOME -ChildPath micromamba)
          $Env:MAMBA_EXE=(Join-Path -Path (Get-Location) -ChildPath micromamba.exe)
          #.\micromamba.exe shell hook -s powershell | Out-String | Invoke-Expression
          .\micromamba.exe create -y -n wradlib-tests python=3.9 pip --channel conda-forge
        shell: powershell
      - name: Install packages
        run: |
          eval "$(./micromamba shell hook -s bash)"
          micromamba activate wradlib-tests
          micromamba install -y tqdm --channel conda-forge
          micromamba list
          python -c "import sys; print(sys.version)"
          
  trigger_rtd:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: [build]
    steps:
      - name: Run a multi-line script
        run: |
          echo Works.
          
  upload_pypi:
    if: github.event_name == 'release'
    needs: [build]
    name: deploy to pypi
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install semver setuptools wheel twine
          git describe --tags --long
          git rev-parse HEAD
      - name: Package and Upload
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          echo "RUN UPLOAD PYPI"
  
